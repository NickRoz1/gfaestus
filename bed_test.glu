let gfaestus = import! gfaestus
let bed = import! bed
let array = import! std.array
let opt = import! std.option
let map @ { ? } = import! std.map
let io @ { ? }  = import! std.io
let { (<>) } = import! std.semigroup
let node_color g x = gfaestus.hash_node_color (gfaestus.hash_node_seq g x)

let bed_file = bed.parse_bed_file_unwrap("a3105.test.bed")

// let add_value : gfaestus.GraphHandle -> (bed.BedRecord -> Map Int (Float, Float, FLoat))



// let bed_node_colors graph record: gfaestus.GraphHandle -> bed.BedRecord -> Map Int (Float, Float, Float) =
// let bed_node_colors graph record: gfaestus.GraphHandle -> bed.BedRecord -> (Float, Float, Float) =
let bed_node_colors graph record: gfaestus.GraphHandle -> bed.BedRecord -> (Array Int, (Float, Float, Float)) =
    let path_id = opt.unwrap (gfaestus.get_path_id graph (bed.chrom record))
    let steps = opt.unwrap (gfaestus.path_base_range graph path_id (bed.chrom_start record) (bed.chrom_end record))
    let color = opt.unwrap (bed.item_rgb record)
    let map_fn step = step._0
    let nodes = array.functor.map map_fn steps
    (nodes, color)


let record_color_map input : (Array Int, (Float, Float, Float)) -> map.Map Int (Float, Float, Float) =
    let ids = input._0
    let color = input._1
    let fold_fn acc id : map.Map Int (Float, Float, Float)
                      -> Int
                      -> map.Map Int (Float, Float, Float) =
        map.insert id color acc
    let empty_map : map.Map Int (Float, Float, Float) = map.empty
    array.foldable.foldl fold_fn empty_map ids

let build_node_map graph records : gfaestus.GraphHandle
                                -> Array bed.BedRecord
                                -> map.Map Int (Float, Float, Float) =
    let id_colors : Array (Array Int, (Float, Float, Float)) =
        let map_fn record = bed_node_colors graph record
        array.functor.map map_fn records

    let fold_fn acc id_rgb : map.Map Int (Float, Float, Float)
                          -> (Array Int, (Float, Float, Float))
                          -> map.Map Int (Float, Float, Float) =
        acc <> (record_color_map id_rgb)

    let empty_map : map.Map Int (Float, Float, Float) = map.empty

    array.foldable.foldl fold_fn empty_map id_colors

// let build_node_map : Map Int (Float, Float, Float) =
//     array.Foldable.foldl (

// let build_color_map graph records : gfaestus.GraphHandle -> Array bed.BedRecord -> Map Int (Float, Float, Float) =
//     array.Foldable.

// let node_color graph id : gfaestus.GraphHandle -> Int -> (Float

// let node_color graph id : gfaestus.GraphHandle -> Int -> (Float, Float, Float) =
//     let color_map = build_node_map graph bed_file
//     opt.unwrap_or (0.2, 0.2, 0.2) (map.find id color_map)

let node_color_io graph : gfaestus.GraphHandle -> IO (Int -> (Float, Float, Float)) =
    io.println (opt.unwrap (bed.name_str (array.index bed_file 1)))
    io.println "Hello world!"

    let color_map = build_node_map graph bed_file
    let node_color id = opt.unwrap_or (0.2, 0.2, 0.2) (map.find id color_map)

    io.wrap node_color

node_color_io